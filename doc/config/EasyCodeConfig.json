{
  "author" : "guocq",
  "version" : "1.2.7",
  "userSecure" : "",
  "currTypeMapperGroupName" : "Default",
  "currTemplateGroupName" : "sagesse",
  "currColumnConfigGroupName" : "sagesse",
  "currGlobalConfigGroupName" : "Default",
  "typeMapper" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "matchType" : "REGEX",
        "columnType" : "varchar(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "char(\\(\\d+\\))?",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|medium|long)*text",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "REGEX",
        "columnType" : "decimal(\\(\\d+,\\d+\\))?",
        "javaType" : "java.math.BigDecimal"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "integer",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "REGEX",
        "columnType" : "(tiny|small|medium)*int(\\(\\d+\\))?",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int4",
        "javaType" : "java.lang.Integer"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "int8",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "REGEX",
        "columnType" : "bigint(\\(\\d+\\))?",
        "javaType" : "java.lang.Long"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "date",
        "javaType" : "java.time.LocalDate"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "datetime",
        "javaType" : "java.time.LocalDateTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "timestamp",
        "javaType" : "java.util.Date"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "time",
        "javaType" : "java.time.LocalTime"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "boolean",
        "javaType" : "java.lang.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "bit(1)",
        "javaType" : "java.util.Boolean"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "float",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "double",
        "javaType" : "java.lang.String"
      }, {
        "matchType" : "ORDINARY",
        "columnType" : "decimal(10)",
        "javaType" : "java.lang.String"
      } ]
    }
  },
  "template" : {
    "sagesse" : {
      "name" : "sagesse",
      "elementList" : [ {
        "name" : "entity.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/entity\", \".java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.entity\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.entity.AbstractDataEntity;\nimport java.util.StringJoiner;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}(${tableInfo.obj.name})数据展示层实体信息</p>\n *\n * @author $author\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends AbstractDataEntity {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n    #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.isSupper})\n    #if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */#end\n         \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n    #end\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n        #foreach($column in $tableInfo.fullColumn)\n        .add(\"$!{column.name}=\" + $!{column.name})\n        #end        .toString();\n    }\n}"
      }, {
        "name" : "entityVo.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/vo\", \"Vo.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.vo\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.vo.AbstractDataVo;\nimport java.util.StringJoiner;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name} + \"Vo\")\n#set($entityClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}数据展示层实体信息</p>\n *\n * @author $author\n * @see $!{tableInfo.savePackageName}.domain.domain.$entityClassName\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends AbstractDataVo {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n    #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.isSupper})\n    #if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */#end\n         \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n    #end\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n        #foreach($column in $tableInfo.fullColumn)\n        .add(\"$!{column.name}=\" + $!{column.name})\n        #end        .toString();\n    }\n}"
      }, {
        "name" : "queryDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/dto\", \"QueryDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.dto.AbstractDto;\nimport java.util.StringJoiner;\n#set($hasSet = false)\n#foreach($column in $tableInfo.fullColumn)#set($hasSet = $column.ext.queryType.equals(\"bewteen\"))#end\n#if($hasSet)import java.util.Set;#end\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name} + \"QueryDto\")\n#set($entityClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}数据查询层实体信息</p>\n *\n * @author $author\n * @see $!{tableInfo.savePackageName}.domain.domain.$entityClassName\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends AbstractDto {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n#foreach($column in $tableInfo.fullColumn)#if(!${column.ext.notAllowQuery})\n#set($type = $column.ext.queryType)   \n#if($type.equals(\"in\"))\n#if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */\n#end\n    protected Set<$!{tool.getClsNameByFullName($column.type)}> $!{column.name}Set;\n#elseif($type.equals(\"bewteen\"))\n#if(${column.comment})\n    \n    /**\n     * ${column.comment}起始\n     */\n#end\n    protected $!{tool.getClsNameByFullName($column.type)} $!{column.name}Start;\n#if(${column.comment})\n    \n    /**\n     * ${column.comment}结束\n     */\n#end\n    protected $!{tool.getClsNameByFullName($column.type)} $!{column.name}End;\n#{else}#if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */\n#end\n    protected $!{tool.getClsNameByFullName($column.type)} $!{column.name};#end#end\n#end\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)#set($notAllowQuery = $column.ext.notAllowQuery)#set($type = $column.ext.queryType)\n#if(!$notAllowQuery)#if($type.equals(\"bewteen\"))\n                .add(\"$!{column.name}Start=\" + $!{column.name}Start)\n                .add(\"$!{column.name}End=\" + $!{column.name}End)\n#elseif($type.equals(\"in\"))\n                .add(\"$!{column.name}Set=\" + $!{column.name}Set)\n#else\n                .add(\"$!{column.name}=\" + $!{column.name})\n#end\n#else#end#end\n                .toString();\n    }\n}"
      }, {
        "name" : "pageDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/dto\", \"PageDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.dto\")\n\n#set($currentClassName = $!{tableInfo.name} + \"PageDto\")\n#set($queryDtoClassName = $!{tableInfo.name} + \"QueryDto\")\n#set($entityClassName = $!{tableInfo.name})\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.dto.PageableDto;\nimport java.util.StringJoiner;\nimport $!{tableInfo.savePackageName}.domain.entity.$!{queryDtoClassName};\n\n/**\n * <p>$!{tableInfo.comment}数据分页查询层实体信息</p>\n *\n * @author $author\n * @see $!{tableInfo.savePackageName}.domain.domain.$entityClassName\n * @see $!{queryDtoClassName}\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends $!{queryDtoClassName} implements PageableDto {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n    /**\n     * 当前页\n     */\n    private Integer currPage;\n    \n    /**\n     * 页大小\n     */\n    private Integer pageSize;\n\n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n#foreach($column in $tableInfo.fullColumn)#set($notAllowQuery = $column.ext.notAllowQuery)#set($type = $column.ext.queryType)\n#if(!$notAllowQuery)#if($type.equals(\"bewteen\"))\n                .add(\"$!{column.name}Start=\" + $!{column.name}Start)\n                .add(\"$!{column.name}End=\" + $!{column.name}End)\n#elseif($type.equals(\"in\"))\n                .add(\"$!{column.name}Set=\" + $!{column.name}Set)\n#else\n                .add(\"$!{column.name}=\" + $!{column.name})\n#end\n#else#end#end\n                .add(\"currPage=\" + currPage)\n                .add(\"pageSize=\" + pageSize)\n                .toString();\n    }\n}"
      }, {
        "name" : "createDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/dto\", \"CreateDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.dto.AbstractDto;\nimport java.util.StringJoiner;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name} + \"CreateDto\")\n#set($entityClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}数据展示层实体信息</p>\n *\n * @author $author\n * @see $!{tableInfo.savePackageName}.domain.domain.$entityClassName\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends AbstractDto {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n    #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.notAllowCreate})\n    #if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */#end\n         \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n    #end\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n        #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.notAllowCreate})\n        .add(\"$!{column.name}=\" + $!{column.name})\n        #end#end        .toString();\n    }\n}"
      }, {
        "name" : "putDto.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/dto\", \"PutDto.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.dto\")\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport lombok.Getter;\nimport lombok.Setter;\nimport org.edu.sagesse.data.base.domain.dto.AbstractDto;\nimport java.util.StringJoiner;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name} + \"PutDto\")\n#set($entityClassName = $!{tableInfo.name})\n/**\n * <p>$!{tableInfo.comment}数据展示层实体信息</p>\n *\n * @author $author\n * @see $!{tableInfo.savePackageName}.domain.domain.$entityClassName\n * @since $!time.currTime()\n */\n@Setter\n@Getter\npublic class $!{currentClassName} extends AbstractDto {\n    private static final long serialVersionUID = $!tool.serial();\n    \n    public static final $!{currentClassName} EMPTY = new $!{currentClassName}();\n    \n    public $!{currentClassName}() {\n    }\n    #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.notAllowPut})\n    #if(${column.comment})\n    \n    /**\n     * ${column.comment}\n     */#end\n         \n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n    #end\n    #end\n    \n    @Override\n    public String toString() {\n        return new StringJoiner(\", \", ${currentClassName}.class.getSimpleName() + \"[\", \"]\")\n        #foreach($column in $tableInfo.fullColumn)#if(!${column.ext.notAllowPut})\n        .add(\"$!{column.name}=\" + $!{column.name})\n        #end#end        .toString();\n    }\n}"
      }, {
        "name" : "dao.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n#set($queryDtoClass = $!{tableInfo.name} + \"QueryDto\")\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.domain.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{queryDtoClass};\nimport org.apache.ibatis.annotations.Param;\nimport org.apache.ibatis.annotations.Mapper;\nimport org.springframework.data.domain.Pageable;\nimport org.apache.ibatis.annotations.Param;\nimport org.edu.sagesse.common.support.helper.EnumHelper;\nimport org.edu.sagesse.data.base.support.enums.DataStatus;\nimport java.util.List;\nimport java.util.Set;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})Dao\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Mapper\npublic interface $!{tableName} {\n\n    /**\n     * <p>根据主键以及数据状态查询唯一数据</p>\n     *\n     * @param $!pk.name 主键\n     * @param dataStatusSet 数据状态集合\n     * @return {@link $!{tableInfo.name}}\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    $!{tableInfo.name} find(@Param(\"$!pk.name\") $!pk.shortType $!pk.name, @Param(\"dataStatusSet\") Set<Integer> dataStatusSet);\n\n    /**\n     * <p>根据主键查询唯一数据</p>\n     *\n     * @param $!pk.name 主键\n     * @return {@link $!{tableInfo.name}}\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    default $!{tableInfo.name} findById(@Param(\"$!pk.name\") $!pk.shortType $!pk.name) {\n        Set<Integer> enableStatus = EnumHelper.getStatusCodeSet(DataStatus.ENABLE);\n        return find($!pk.name, enableStatus);\n    }\n    \n    /**\n     * <p>根据条件查询唯一数据</p>\n     *\n     * @param queryParam    查询参数\n     * @return {@link $!{tableInfo.name}}\n     * @author $!author\n     * @since $!time.currTime()\n     */\n     $!{tableInfo.name} findByParam(@Param(\"queryParam\") $queryDtoClass queryParam);\n    \n    /**\n     * <p>根据条件查询数据</p>\n     *\n     * @param queryParam    查询参数\n     * @return {@link $!{tableInfo.name}}\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    List<$!{tableInfo.name}> list(@Param(\"queryParam\") $queryDtoClass queryParam);\n    \n    /**\n     * <p>新增数据</p>\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 数据实体\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int create($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n     /**\n     * <p>批量新增数据</p>\n     *\n     * @param list 数据实体列表\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int createBatch(@Param(\"list\") List<$!{tableInfo.name}> list);\n\n    /**\n     * <p>根据主键更新数据</p>\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) 更新的数据实体\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * <p>根据主键逻辑删除数据</p>\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int deleteLogic($!pk.shortType $!pk.name);\n    \n    /**\n     * <p>根据主键列表逻辑删除数据</p>\n     *\n     * @param set 主键列表\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int deleteLogic(@Param(\"set\") Set<$!pk.shortType> set);\n    \n    /**\n     * <p>根据主键物理删除数据</p>\n     *\n     * @param $!pk.name 主键\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int deletePhysic($!pk.shortType $!pk.name);\n    \n    /**\n     * <p>根据主键列表物理删除数据</p>\n     *\n     * @param set 主键列表\n     * @return 影响行数\n     * @author $!author\n     * @since $!time.currTime()\n     */\n    int deletePhysic(@Param(\"set\") Set<$!pk.shortType> set);\n}\n"
      }, {
        "name" : "dao.xml.vm",
        "code" : "##引入mybatis支持\n$!{mybatisSupport.vm}\n\n##设置保存名称与保存位置\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n    #set($resultMapName = $!{tableInfo.name}+\"ResultMap\")\n    <resultMap id=\"${resultMapName}\" type=\"$!{tableInfo.savePackageName}.domain.entity.$!{tableInfo.name}\">\n        <!--@Table $!{tableInfo.obj.name}-->\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n    #set($sqlId = $!{tableInfo.obj.name}+\"_columns\")\n    #set($simpleName = \"\")#foreach($str in $!{tableInfo.obj.name.split(\"_\")})#set($simpleName = $simpleName+$str.substring(0,1))#end\n    <sql id=\"${sqlId}\">\n            <!--@sql select -->\n    #foreach($column in $tableInfo.fullColumn)\n        ${simpleName}.$!{column.obj.name}#if($velocityCount != $tableInfo.fullColumn.size()),#end\n    \n    #end\n        <!--@sql from $!{tableInfo.obj.name} ${simpleName}-->\n    </sql>\n    \n    <!-- 根据主键以及数据状态查询唯一数据 -->\n    <select id=\"find\" resultMap=\"${resultMapName}\">\n        select \n        <include refid=\"${sqlId}\"/>\n        from $!{tableInfo.obj.name} ${simpleName}\n        where ${simpleName}.$!pk.obj.name = #{$!pk.name, jdbcType=BIGINT}\n        <if test=\"dataStatusSet != null and dataStatusSet.size() != 0\">\n            and ${simpleName}.data_status in\n            <foreach collection=\"dataStatusSet\" item=\"dataStatus\" separator=\",\" open=\"(\" close=\")\">\n                #{dataStatus,jdbcType=INTEGER}\n            </foreach>\n        </if>\n    </select>\n    \n    <!-- 根据条件查询唯一数据 -->\n    <select id=\"findByParam\" resultMap=\"${resultMapName}\">\n        select \n        <include refid=\"${sqlId}\"/>\n        from $!{tableInfo.obj.name} ${simpleName}\n        <where>\n#foreach($column in $tableInfo.fullColumn)#set($type = $column.ext.queryType)#set($allowQuery = !$column.ext.notAllowQuery)\n#if($allowQuery&&$type.equals(\"eq\"))\n            <if test=\"queryParam.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and queryParam.$!column.name != ''#end\">\n                and ${simpleName}.$!column.obj.name = #{queryParam.$!column.name, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"like\"))\n            <if test=\"queryParam.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and queryParam.$!column.name != ''#end\">\n                and ${simpleName}.$!column.obj.name like concat('%', #{queryParam.$!column.name, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}, '%')\n            </if>\n#elseif($allowQuery&&$type.equals(\"in\"))\n            <if test=\"queryParam.$!{column.name}Set != null and queryParam.$!{column.name}Set.size() != 0\">\n                and ${simpleName}.$!column.obj.name in\n                <foreach collection=\"queryParam.$!{column.name}Set\" item=\"$!{column.name}\" separator=\",\" open=\"(\" close=\")\">\n                    #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n                </foreach>\n            </if>\n#elseif($allowQuery&&$type.equals(\"notin\"))\n            <if test=\"queryParam.$!{column.name}Set != null and queryParam.$!{column.name}Set.size() != 0\">\n                and ${simpleName}.$!column.obj.name not in\n                <foreach collection=\"queryParam.$!{column.name}Set\" item=\"$!{column.name}\" separator=\",\" open=\"(\" close=\")\">\n                    #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n                </foreach>\n            </if>\n#elseif($allowQuery&&$type.equals(\"bewteen\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ >= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n            <if test=\"queryParam.$!{column.name}End != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ <= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"lt\"))\n            <if test=\"queryParam.$!{column.name} != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ < ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"le\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ <= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>     \n#elseif($allowQuery&&$type.equals(\"gt\"))\n            <if test=\"queryParam.$!{column.name} != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ > ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"ge\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ >= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#end#end\n        </where>\n        limit 1\n    </select>\n    \n    <!-- 根据条件查询数据 -->\n    <select id=\"list\" resultMap=\"${resultMapName}\">\n        select \n        <include refid=\"${sqlId}\"/>\n        from $!{tableInfo.obj.name} ${simpleName}\n        <where>\n#foreach($column in $tableInfo.fullColumn)#set($type = $column.ext.queryType)#set($allowQuery = !$column.ext.notAllowQuery)\n#if($allowQuery&&$type.equals(\"eq\"))\n            <if test=\"queryParam.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and queryParam.$!column.name != ''#end\">\n                and ${simpleName}.$!column.obj.name = #{queryParam.$!column.name, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"like\"))\n            <if test=\"queryParam.$!column.name != null#if($column.type.equals(\"java.lang.String\")) and queryParam.$!column.name != ''#end\">\n                and ${simpleName}.$!column.obj.name like concat('%', #{queryParam.$!column.name, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}, '%')\n            </if>\n#elseif($allowQuery&&$type.equals(\"in\"))\n            <if test=\"queryParam.$!{column.name}Set != null and queryParam.$!{column.name}Set.size() != 0\">\n                and ${simpleName}.$!column.obj.name in\n                <foreach collection=\"queryParam.$!{column.name}Set\" item=\"$!{column.name}\" separator=\",\" open=\"(\" close=\")\">\n                    #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n                </foreach>\n            </if>\n#elseif($allowQuery&&$type.equals(\"notin\"))\n            <if test=\"queryParam.$!{column.name}Set != null and queryParam.$!{column.name}Set.size() != 0\">\n                and ${simpleName}.$!column.obj.name not in\n                <foreach collection=\"queryParam.$!{column.name}Set\" item=\"$!{column.name}\" separator=\",\" open=\"(\" close=\")\">\n                    #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n                </foreach>\n            </if>\n#elseif($allowQuery&&$type.equals(\"bewteen\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ >= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n            <if test=\"queryParam.$!{column.name}End != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ <= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"lt\"))\n            <if test=\"queryParam.$!{column.name} != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ < ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"le\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ <= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>     \n#elseif($allowQuery&&$type.equals(\"gt\"))\n            <if test=\"queryParam.$!{column.name} != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ > ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#elseif($allowQuery&&$type.equals(\"ge\"))\n            <if test=\"queryParam.$!{column.name}Start != null\">\n                and ${simpleName}.$!column.obj.name <![CDATA[ >= ]]> #{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}\n            </if>\n#end#end\n        </where>\n    </select>\n    \n    <!-- 新增数据 -->\n    <insert id=\"create\">\n        insert into $!{tableInfo.obj.name}(#allSqlColumn())\n        values (#foreach($column in $tableInfo.fullColumn)#{$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}#if($velocityHasNext), #end#end)\n    </insert>\n    \n    <!-- 批量新增数据 -->\n    <insert id=\"createBatch\">\n    insert into $!{tableInfo.obj.name}(#allSqlColumn()) values\n    <foreach collection=\"list\" item=\"item\" separator=\",\">\n        (#foreach($column in $tableInfo.fullColumn)#{item.$!{column.name}, jdbcType=#if($!column.type.equals(\"java.lang.Long\"))BIGINT#else$!column.ext.jdbcType#end}#if($velocityHasNext), #end#end)\n    </foreach>\n    </insert>\n    \n    <!-- 根据主键更新数据 -->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n            <set>\n    #foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                    $!column.obj.name = #{$!column.name},\n                </if>\n    #end\n        </set>\n        where $!pk.obj.name = #{$!pk.name, jdbcType=BIGINT}\n    </update>\n    \n    <!-- 根据主键逻辑删除数据 -->\n    <update id=\"deleteLogic\" parameterType=\"long\">\n        update $!{tableInfo.obj.name} set data_status = cast('${@org.edu.sagesse.data.base.support.pool.DataStatusPool@DELETE}' as int)\n        where $!pk.obj.name = #{$!pk.name, jdbcType=BIGINT}\n    </update>\n    \n    <!-- 根据主键列表逻辑删除数据 -->\n    <update id=\"deleteLogic\" parameterType=\"set\">\n        update $!{tableInfo.obj.name} set data_status = cast('${@org.edu.sagesse.data.base.support.pool.DataStatusPool@DELETE}' as int)\n        where $!pk.obj.name in \n        <foreach collection=\"set\" item=\"$!pk.name\" separator=\",\" open=\"(\" close=\")\"> \n            #{$!pk.name, jdbcType=BIGINT}\n        </foreach>\n    </update>\n    \n    <!-- 根据主键物理删除数据 -->\n    <delete id=\"deletePhysic\" parameterType=\"long\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name, jdbcType=BIGINT}\n    </delete>\n    \n    <!-- 根据主键列表物理删除数据 -->\n    <delete id=\"deletePhysic\" parameterType=\"set\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name in \n        <foreach collection=\"set\" item=\"$!pk.name\" separator=\",\" open=\"(\" close=\")\"> \n            #{$!pk.name, jdbcType=BIGINT}\n        </foreach>\n    </delete>\n\n</mapper>\n"
      }, {
        "name" : "service.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n    #set($getPk = \"get\" + $tool.firstUpperCase($pk))\n    #set($setPk = \"set\" + $tool.firstUpperCase($pk))\n#end\n#set($entityClass = $!{tableInfo.name})\n#set($voClass = $!{tableInfo.name} + \"Vo\")\n#set($queryDtoClass = $!{tableInfo.name} + \"QueryDto\")\n#set($pageDtoClass = $!{tableInfo.name} + \"PageDto\")\n#set($createDtoClass = $!{tableInfo.name} + \"CraeteDto\")\n#set($putDtoClass = $!{tableInfo.name} + \"PutDto\")\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.domain.entity.$!{entityClass};\nimport $!{tableInfo.savePackageName}.domain.vo.$!{voClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{queryDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{pageDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{createDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{putDtoClass};\nimport java.util.List;\nimport java.util.Set;\nimport com.github.pagehelper.PageInfo;\n\n/**\n* $!{tableInfo.comment}业务类接口\n*\n* @author $!author\n* @since $!time.currTime()\n*/\npublic interface ${entityClass}Service {\n   /**\n    * <p>根据主键查询单条数据</p>\n    *\n    * @param id 主键\n    * @return {@link${voClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    ${voClass} find(Long id);\n    \n   /**\n    * <p>根据参数查询单条数据</p>\n    *\n    * @param dto 参数\n    * @return {@link${voClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    ${voClass} find(${queryDtoClass} dto);\n    \n   /**\n    * <p>根据参数查询数据列表</p>\n    *\n    * @param dto 参数\n    * @return {@link List<${voClass}>}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    List<${voClass}> list(${queryDtoClass} dto);\n    \n   /**\n    * <p>根据参数分页查询数据列表</p>\n    *\n    * @param dto 分页参数\n    * @return {@link List<${voClass}>}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    PageInfo<${voClass}> page(${pageDtoClass} dto);\n    \n   /**\n    * <p>根据参数新增数据</p>\n    *\n    * @param dto 参数\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    boolean create(${createDtoClass} dto);\n    \n   /**\n    * <p>根据参数批量新增数据</p>\n    *\n    * @param list 参数列表\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    boolean create(List<${createDtoClass}> list);\n    \n   /**\n    * <p>根据参数修改数据</p>\n    *\n    * @param dto 参数\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    boolean put(${putDtoClass} dto);\n    \n   /**\n    * <p>根据主键和是否逻辑删除条件删除数据</p>\n    *\n    * @param id 主键\n    * @param isLogic 是否为逻辑删除 true:逻辑删除 false:物理删除\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    boolean remove(Long id, boolean isLogic);\n    \n    /**\n    * <p>根据主键列表和是否逻辑删除条件删除数据</p>\n    *\n    * @param id 主键列表\n    * @param isLogic 是否为逻辑删除 true:逻辑删除 false:物理删除\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    boolean remove(Set<Long> idSet, boolean isLogic);\n }"
      }, {
        "name" : "serviceImpl.java.vm",
        "code" : "##定义初始变量\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##设置回调\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##拿到主键\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n    #set($getPk = \"get\" + $tool.firstUpperCase($pk.name))\n    #set($setPk = \"set\" + $tool.firstUpperCase($pk.name))\n#end\n#set($entityClass = $!{tableInfo.name})\n#set($voClass = $!{tableInfo.name} + \"Vo\")\n#set($queryDtoClass = $!{tableInfo.name} + \"QueryDto\")\n#set($pageDtoClass = $!{tableInfo.name} + \"PageDto\")\n#set($createDtoClass = $!{tableInfo.name} + \"CraeteDto\")\n#set($putDtoClass = $!{tableInfo.name} + \"PutDto\")\n#set($serviceClass = $!{entityClass} + \"Service\")\n#set($daoClass = $!{entityClass} + \"Dao\")\n#set($daoVar = $tool.firstLowerCase($daoClass))\n#set($entityVar = $tool.firstLowerCase($entityClass))\n#set($convertClass = ${entityClass} + \"Convert\")\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.domain.entity.$!{entityClass};\nimport $!{tableInfo.savePackageName}.domain.vo.$!{voClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{queryDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{pageDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{createDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{putDtoClass};\nimport $!{tableInfo.savePackageName}.dao.$!{daoClass};\nimport $!{tableInfo.savePackageName}.service.$!{serviceClass};\nimport $!{tableInfo.savePackageName}.domain.convert.$!{convertClass};\nimport org.edu.sagesse.common.support.exception.CoreException;\nimport org.edu.sagesse.common.support.helper.Builder;\nimport org.edu.sagesse.common.support.rest.CoreRestEnum;\nimport org.edu.sagesse.data.base.domain.entity.AbstractDataEntity;\nimport java.util.List;\nimport java.util.Set;\nimport com.github.pagehelper.PageInfo;\nimport org.edu.sagesse.common.support.logger.SaLogger;\nimport org.edu.sagesse.common.support.logger.SaLoggerFactory;\nimport javax.annotation.Resource;\nimport java.util.Objects;\nimport java.util.Optional;\nimport java.util.stream.Collectors;\nimport org.springframework.stereotype.Service;\nimport org.edu.sagesse.data.base.support.annotation.crud.PageQuery;\nimport org.edu.sagesse.data.base.support.enums.DataStatus;\nimport org.edu.sagesse.data.base.util.PageUtil;\n#set($entityToVoClass =  \"convert\" + $entityClass + \"To\" + ${voClass})\n#set($queryDtoToEntityClass = \"convert\" + ${queryDtoClass} + \"To\" + ${entityClass})\n#set($pageDtoToEntityClass = \"convert\" + ${pageDtoClass} + \"To\" + ${entityClass})\n#set($createDtoToEntityClass = \"convert\" + ${createDtoClass} + \"To\" + ${entityClass})\n#set($putDtoToEntityClass = \"convert\" + ${putDtoClass} + \"To\" + ${entityClass})\n/**\n * $!{tableInfo.comment}业务类接口实现类\n *\n * @author $!author\n * @since $!time.currTime()\n */\n @Service(value = \"$tool.firstLowerCase(${serviceClass})\")\n public class ${serviceClass}Impl implements ${serviceClass} {\n    private static final SaLogger LOGGER = SaLoggerFactory.getLogger(${serviceClass}Impl.class);\n    @Resource\n    private ${daoClass} ${daoVar};\n    \n   /**\n    * <p>根据主键查询单条数据</p>\n    *\n    * @param id 主键\n    * @return {@link${voClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public ${voClass} find(Long id) {\n        LOGGER.debug(\"根据id={}查询单条数据\", id);\n        ${entityClass} ${entityVar} = ${daoVar}.findById(id);\n        return $convertClass.${entityToVoClass}(${entityVar});\n    }\n    \n   /**\n    * <p>根据参数查询单条数据</p>\n    *\n    * @param dto 参数\n    * @return {@link${voClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public ${voClass} find(${queryDtoClass} dto) {\n        LOGGER.debug(\"根据参数={}查询单条数据\", dto);\n        ${entityClass} ${entityVar} = ${daoVar}.findByParam(dto);\n        return $convertClass.${entityToVoClass}(${entityVar});\n    }\n    \n   /**\n    * <p>根据参数查询数据列表</p>\n    *\n    * @param dto 参数\n    * @return {@link List<${voClass}>}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public List<${voClass}> list(${queryDtoClass} dto) {\n        LOGGER.debug(\"根据参数={}查询数据列表\", dto);\n        List<${entityClass}> ${entityVar}List = ${daoVar}.list(dto);\n        return ${entityVar}List.stream().map($convertClass::${entityToVoClass}).collect(Collectors.toList());\n    }\n    \n   /**\n    * <p>根据参数分页查询数据列表</p>\n    *\n    * @param dto 分页参数\n    * @return {@link List<${voClass}>}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    @PageQuery\n    public PageInfo<${voClass}> page(${pageDtoClass} dto) {\n        LOGGER.debug(\"根据参数={}分页查询数据列表\", dto);\n        List<${entityClass}> list = ${daoVar}.list(dto);\n        List<${voClass}> vos = list.stream().map($convertClass::${entityToVoClass}).collect(Collectors.toList());\n        return PageUtil.toPageInfo(vos, new PageInfo<>(list))\n    }\n    \n   /**\n    * <p>根据参数新增数据</p>\n    *\n    * @param dto 参数\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public boolean create(${createDtoClass} dto) {\n        LOGGER.debug(\"根据参数={}新增单条数据\", dto);\n        ${entityClass} ${entityVar} = ${convertClass}.${createDtoToEntityClass}(dto);\n        checkBeforeCreate(${entityVar});\n        return ${daoVar}.create(dict) == 1;\n    }\n    \n   /**\n    * <p>根据参数批量新增数据</p>\n    *\n    * @param list 参数列表\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public boolean create(List<${createDtoClass}> list) {\n        List<${entityClass}> ${entityVar}List = list.stream()\n                .map(${convertClass}::${createDtoToEntityClass})\n                .peek(this::checkBeforeCreate)\n                .collect(Collectors.toList());\n       return ${entityVar}List.size() == ${daoVar}.createBatch(${entityVar}List);\n    }\n    \n   /**\n    * <p>根据参数修改数据</p>\n    *\n    * @param dto 参数\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public boolean put(${putDtoClass} dto) {\n        ${entityClass} ${entityVar} = ${convertClass}.${putDtoToEntityClass}(dto);\n        checkBeforePut(${entityVar});\n        return ${daoVar}.update(${entityVar}) == 1;\n    }\n    \n   /**\n    * <p>根据主键和是否逻辑删除条件删除数据</p>\n    *\n    * @param id 主键\n    * @param isLogic 是否为逻辑删除 true:逻辑删除 false:物理删除\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public boolean remove(Long id, boolean isLogic) {\n        checkBeforeRemove(id);\n        int count = isLogic ? ${daoVar}.deleteLogic(id): ${daoVar}.deletePhysic(id);\n        return count == 1;\n    }\n    \n   /**\n    * <p>根据主键列表和是否逻辑删除条件删除数据</p>\n    *\n    * @param id 主键列表\n    * @param isLogic 是否为逻辑删除 true:逻辑删除 false:物理删除\n    * @return {@link boolean}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    @Override\n    public boolean remove(Set<Long> idSet, boolean isLogic) {\n        idSet.forEach(this::checkBeforeRemove);\n        int count = isLogic ? ${daoVar}.deleteLogic(idSet): ${daoVar}.deletePhysic(idSet);\n        return count == idSet.size();\n    }\n    \n   /**\n    * <p>根据唯一限定字段构建参数</p>\n    *\n    * @param ${entityVar} ${entityVar}\n    * @return {@link ${queryDtoClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    private ${queryDtoClass} uniqueParamBuild(${entityClass} ${entityVar}) {\n        return Builder.builder(${queryDtoClass}::new)\n#foreach($column in $tableInfo.fullColumn)#set($unique = !!$column.ext.unique)\n#if($unique)#set($upColumn = $tool.firstUpperCase(${column.name}) )\n                .enhanceWith(${queryDtoClass}::set${upColumn}, ${entityVar}::get$upColumn)\n#end\n#if($column.name.equals(\"dataStatus\"))\n                .enhanceWith(${queryDtoClass}::setDataStatus, DataStatus.ENABLE::value)\n#end\n#end\n                .build();\n    }\n    \n    /**\n    * <p>创建之前进行校验</p>\n    *\n    * @param ${entityVar} ${entityVar}\n    * @return {@link ${entityClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    private void checkBeforeCreate(${entityClass} ${entityVar}) {\n        ${queryDtoClass} uniqueParam = uniqueParamBuild(${entityVar});\n        if (AbstractDataEntity.isNotEmpty(${daoVar}.findByParam(uniqueParam))) {\n            LOGGER.error(\"数据{}已存在\", uniqueParam);\n            throw new CoreException(CoreRestEnum.DATA_EXIST);\n        }\n    }\n    \n    /**\n    * <p>更新之前进行校验</p>\n    *\n    * @param ${entityVar} ${entityVar}\n    * @return {@link ${entityClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    private void checkBeforePut(${entityClass} ${entityVar}) {\n        Long ${pk.name} = ${entityVar}.${getPk}();\n        checkBeforeRemove(${pk.name});\n        ${queryDtoClass} uniqueParam = uniqueParamBuild(${entityVar});\n        long count = ${daoVar}.list(uniqueParam).stream().filter(ele -> !Objects.equals(ele.${getPk}(), ${pk.name})).count();\n        if (count > 0) {\n            LOGGER.error(\"{}的数据已存在，不能重复\", uniqueParam);\n            throw new CoreException(CoreRestEnum.DATA_EXIST);\n        }\n    }\n    \n    /**\n    * <p>删除之前进行校验</p>\n    *\n    * @param ${entityVar} ${entityVar}\n    * @return {@link ${entityClass}}\n    * @author $!author\n    * @since $!time.currTime()\n    */\n    private void checkBeforeRemove(Long id) {\n        if (AbstractDataEntity.isEmpty(${daoVar}.findById(id))) {\n            LOGGER.error(\"id={}的数据不存在\", id);\n            throw new CoreException(CoreRestEnum.DATA_NOT_EXIST);\n        }\n    }\n }"
      }, {
        "name" : "controller.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/web\", \"Controller.java\")\n\n##使用宏定义设置包后缀\n#setPackageSuffix(\"web\")\n#set($serviceClass = $!{tableInfo.name} + \"Service\")\n#set($serviceVar = $tool.firstLowerCase($!{serviceClass}))\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport $!{tableInfo.savePackageName}.service.$serviceClass;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n##使用宏定义实现类注释信息\n#set($currentClassName = $!{tableInfo.name} + \"Controller\")\n/**\n* <p>$!{tableInfo.comment}业务类Controller</p>\n*\n* @author $author\n* @since $!time.currTime()\n*/\n@RestController\n@Api(value = \"$!{tableInfo.comment}controller\", tags = \"$!{tableInfo.comment}controller\")\n@RequestMapping(value = \"\")\npublic class ${currentClassName} {\n    private $serviceClass $serviceVar;\n    \n    @Autowired\n    public void set$serviceClass($serviceClass $serviceVar) {\n        this.$serviceVar = $serviceVar;\n    }\n}"
      }, {
        "name" : "convert.java.vm",
        "code" : "##引入宏定义\n$!{define.vm}\n\n##使用宏定义设置回调（保存位置与文件后缀）\n#save(\"/domain/convert\", \"Convert.java\")\n##使用宏定义设置包后缀\n#setPackageSuffix(\"domain.convert\")\n##实体类和实体类变量\n#set($entityClass = $!{tableInfo.name})\n#set($entityVar = $tool.firstLowerCase($entityClass))\n##Vo类和Vo类变量\n#set($voClass = $!{tableInfo.name} + \"Vo\")\n#set($voVar = $tool.firstLowerCase($voClass))\n##QueryDto类和QueryDto类变量\n#set($queryDtoClass = $!{tableInfo.name} + \"QueryDto\")\n#set($queryDtoVar = $tool.firstLowerCase($queryDtoClass))\n##PageDto类和PageDto类变量\n#set($pageDtoClass = $!{tableInfo.name} + \"PageDto\")\n#set($pageDtoVar = $tool.firstLowerCase($pageDtoClass))\n##CreateDto类和CreateDto类变量\n#set($createDtoClass = $!{tableInfo.name} + \"CreateDto\")\n#set($createDtoVar = $tool.firstLowerCase($createDtoClass))\n##PutDto类和PutDto类变量\n#set($putDtoClass = $!{tableInfo.name} + \"PutDto\")\n#set($putDtoVar = $tool.firstLowerCase($putDtoClass))\n## 方法名定义\n#set($entityToVoFunc =  \"convert\" + $entityClass + \"To\" + ${voClass})\n#set($queryDtoToEntityFunc = \"convert\" + ${queryDtoClass} + \"To\" + ${entityClass})\n#set($pageDtoToEntityFunc = \"convert\" + ${pageDtoClass} + \"To\" + ${entityClass})\n#set($createDtoToEntityFunc = \"convert\" + ${createDtoClass} + \"To\" + ${entityClass})\n#set($putDtoToEntityFunc = \"convert\" + ${putDtoClass} + \"To\" + ${entityClass})\n\n##使用全局变量实现默认包导入\n$!{autoImport.vm}\nimport $!{tableInfo.savePackageName}.domain.entity.$!{entity};\nimport $!{tableInfo.savePackageName}.domain.vo.$!{voClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{createDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{putDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{pageDtoClass};\nimport $!{tableInfo.savePackageName}.domain.dto.$!{queryDtoClass};\nimport org.edu.sagesse.common.support.helper.Builder;\n\n/**\n * <p>$!{tableInfo.comment}实体转换</p>\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic class $!{entityClass}Convert {\n   /**\n    * <p>{@link $entityClass}转化为{@link $voClass}</p>\n    *\n    * @param $entityVar 被转换的原数据\n    * @return 转换为{@link $voClass}\n    * @author guocq\n    * @date $!time.currTime()\n    */\n    public static $voClass $entityToVoFunc($entityClass $entityVar) {\n        if (${entityVar} == null) {\n            return $!{voClass}.EMPTY;\n        }\n        return Builder.builder($voClass::new)\n#foreach($column in $tableInfo.fullColumn)#set($upColumnName = $!tool.firstUpperCase($!{column.name}))\n                    .enhanceWith($voClass::set$upColumnName, $entityVar::get$upColumnName)\n#end\n                    .build();\n    }\n    \n    /**\n    * <p>{@link $createDtoClass}转化为{@link $entityClass}</p>\n    *\n    * @param $createDtoVar 被转换的原数据\n    * @return 转换为{@link $entityClass}\n    * @author guocq\n    * @date $!time.currTime()\n    */\n    public static $entityClass $createDtoToEntityFunc($createDtoClass $createDtoVar) {\n        if (${createDtoVar} == null) {\n            return $!{entityClass}.EMPTY;\n        }\n        return Builder.builder($entityClass::new)\n#foreach($column in $tableInfo.fullColumn)#set($upColumnName = $!tool.firstUpperCase($!{column.name}))\n                    .enhanceWith($entityClass::set$upColumnName, $createDtoVar::get$upColumnName)\n#end\n                    .build();\n    }\n    \n    /**\n    * <p>{@link $putDtoClass}转化为{@link $entityClass}</p>\n    *\n    * @param $putDtoVar 被转换的原数据\n    * @return 转换为{@link $entityClass}\n    * @author guocq\n    * @date $!time.currTime()\n    */\n    public static $entityClass $putDtoToEntityFunc($putDtoClass $putDtoVar) {\n        if (${putDtoVar} == null) {\n            return $!{entityClass}.EMPTY;\n        }\n        return Builder.builder($entityClass::new)\n#foreach($column in $tableInfo.fullColumn)#set($upColumnName = $!tool.firstUpperCase($!{column.name}))\n                    .enhanceWith($entityClass::set$upColumnName, $putDtoVar::get$upColumnName)\n#end\n                    .build();\n    }\n}"
      } ]
    }
  },
  "columnConfig" : {
    "sagesse" : {
      "name" : "sagesse",
      "elementList" : [ {
        "title" : "unique",
        "type" : "BOOLEAN"
      }, {
        "title" : "isSupper",
        "type" : "BOOLEAN",
        "selectValue" : ""
      }, {
        "title" : "queryType",
        "type" : "SELECT",
        "selectValue" : "eq,like,in,notin,bewteen,lt,le,gt,ge"
      }, {
        "title" : "notAllowQuery",
        "type" : "BOOLEAN"
      }, {
        "title" : "notAllowCreate",
        "type" : "BOOLEAN"
      }, {
        "title" : "notAllowPut",
        "type" : "BOOLEAN"
      } ]
    }
  },
  "globalConfig" : {
    "Default" : {
      "name" : "Default",
      "elementList" : [ {
        "name" : "autoImport.vm",
        "value" : "##自动导入包（仅导入实体属性需要的包，通常用于实体类）\n#foreach($import in $importList)\nimport $!import;\n#end"
      }, {
        "name" : "define.vm",
        "value" : "##（Velocity宏定义）\n\n##定义设置表名后缀的宏定义，调用方式：#setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##定义设置包名后缀的宏定义，调用方式：#setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##定义直接保存路径与文件名简化的宏定义，调用方式：#save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##定义表注释的宏定义，调用方式：#tableComment(\"注释信息\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##定义GET，SET方法的宏定义，调用方式：#getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"
      }, {
        "name" : "init.vm",
        "value" : "##初始化区域\n\n##去掉表的t_前缀\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##参考阿里巴巴开发手册，POJO 类中布尔类型的变量，都不要加 is 前缀，否则部分框架解析会引起序列化错误\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##实现动态排除列\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##带有反回值的方法调用时使用$tool.call来消除返回值\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##重新保存\n    $tableInfo.setFullColumn($newList)\n#end\n\n##对importList进行篡改\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##带有反回值的方法调用时使用$tool.call来消除返回值\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##覆盖\n#set($importList = $temp)"
      }, {
        "name" : "mybatisSupport.vm",
        "value" : "##针对Mybatis 进行支持，主要用于生成xml文件\n#foreach($column in $tableInfo.fullColumn)\n    ##储存列类型\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##其他类型\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##定义宏，查询所有列\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"
      } ]
    }
  }
}